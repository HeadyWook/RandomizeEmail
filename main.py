#!/usr/bin/env python3

"""This program creates random usernames and passwords for throwaway email addresses. This spares the mental effort of
the user for making up a username and password. It also prevents the user from leaking personal identified information
by avoiding naming bias, such as using variants of an existing email address. Lastly, this program is run on a local
machine which is more secure than using an online string generator.

The program generates two random sets of strings, the length of which is determined by the user. The character set
includes lower (i.e., abc...xyz) and uppercase (i.e., ABC...XYZ) letters and numbers (i.e., 0-9). The only characters
omitted from the character set are: "0", "O", "l", and "I". This is done to avoid confusion as these characters often
look similar depending on the font. It should also be noted that online string generators do not exclude these
characters.

An example: Bob wishes to remain anonymous but wants to sign up for some service which requires an email address. He
already tried free throwaway email services, such as https://throwawaymail.com/ or https://www.guerrillamail.com/ and
they did not work. Over Tor browser, Bob can create a throwaway email at https://register.cock.li/ using a randomized
username and password generated by this program.

Output:

Username: o7mB5f2nr3
Password: hTJ6u5rHVg
"""

# Import the random module.
import random
# Import the datetime module.
import datetime

# Get today's data and time and format it.
DATETIME = datetime.datetime.now().strftime("%c")

# A list of lowercase (i.e., abc...xyz) and uppercase (i.e., ABC...XYZ) letters and numbers (i.e., 0-9). Except "0" "O"
# "l" and "I".
CHARACTER_LIST = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                  'u', 'v', 'w', 'x', 'y', 'z',
                  'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',
                  'U', 'V', 'W', 'X', 'Y', 'Z',
                  '1', '2', '3', '4', '5', '6', '7', '8', '9']

# Empty lists for the username and password characters.
USERNAME = []
PASSWORD = []


# Display the introduction.
def display_intro():
    # Print a divider
    print("=" * 25)
    # Set the intro message and print it in all caps.
    intro_message = "Welcome to the username & password randomizer"
    print(intro_message.upper())
    # Print today's date and time.
    print("Today is:", DATETIME)

    # Print a divider
    print("=" * 25)


# Prompt the user to select the character length of username/password.
def get_length():
    while True:
        try:
            # Prompt the user for an integer input on the character length.
            print("How many characters should I generate?")
            length = int(input("Enter length: "))
            # Check for a length greater than zero.
            # If the length is less than or equal to zero, then print an error message and continue the prompt.
            if length <= 0:
                print("Pick a number greater than zero.\n")
                continue
            else:
                # If the length is valid, then end the while loop and return length.
                return length
        # Accept a value error, print an error message, and continue the prompt.
        except ValueError:
            print("Invalid entry. Try again.\n")
            continue


# Generate two random character lists to the specified length.
def randomize_lists(length):
    while True:
        # Shuffle list, get random choice, and append choice to username list.
        random.shuffle(CHARACTER_LIST)
        random_character = random.choice(CHARACTER_LIST)
        USERNAME.append(random_character)
        # Shuffle list, get random choice, and append  choice to password list.
        random.shuffle(CHARACTER_LIST)
        random_character = random.choice(CHARACTER_LIST)
        PASSWORD.append(random_character)
        # Stop the loop when the desired length is met.
        if len(USERNAME) and len(PASSWORD) == length:
            break
    # Return the username and password lists.
    return USERNAME, PASSWORD


# Display username and password as a string.
def show_results(username_list, password_list):
    # Empty strings for the username and password characters.
    username_string = ""
    password_string = ""
    # Print divider.
    print("=" * 25)
    # Loop through the username list.
    for character in username_list:
        # Concatenate character to username string.
        username_string += character
    # Print username string.
    print("Username:", username_string)
    # Loop through the password list
    for character in password_list:
        # Concatenate character to password string.
        password_string += character
    # Print password string.
    print("Password:", password_string)
    # Print a divider
    print("=" * 25)


# Group together the get length, randomize lists, and show results functions as the start randomizer function.
def start_randomizer():
    length = get_length()
    username, password = randomize_lists(length)
    show_results(username, password)


# Ask the user if they would like to end the program.
def end_randomizer():
    while True:
        # Prompt the user for input.
        user_input = input("Continue the program? (y/n): ").lower()
        # End the program.
        if user_input == "n":
            #  Print goodbye message and end the program.
            print("\nSee ya!")
            break
        # Clear the username and password lists and continue the program.
        elif user_input == "y":
            USERNAME.clear()
            PASSWORD.clear()
            # Print a divider
            print("=" * 25)
            start_randomizer()
        else:
            # Continue with the prompt if there is an invalid entry.
            print("Invalid entry. Try again.\n")
            continue


# The main program.
def main():
    display_intro()
    start_randomizer()
    end_randomizer()


if __name__ == "__main__":
    main()
